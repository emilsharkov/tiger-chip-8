pub const MEMORY_SIZE: usize = 0x1000;
pub const FONTSET_SIZE: usize = 80;
pub const FONTSET_START: usize = 0x0;
pub const PROGRAM_START: usize = 0x200;
const FONTSET: [u8; FONTSET_SIZE] = [
    0xF0, 0x90, 0x90, 0x90, 0xF0, // 0
    0x20, 0x60, 0x20, 0x20, 0x70, // 1
    0xF0, 0x10, 0xF0, 0x80, 0xF0, // 2
    0xF0, 0x10, 0xF0, 0x10, 0xF0, // 3
    0x90, 0x90, 0xF0, 0x10, 0x10, // 4
    0xF0, 0x80, 0xF0, 0x10, 0xF0, // 5
    0xF0, 0x80, 0xF0, 0x90, 0xF0, // 6
    0xF0, 0x10, 0x20, 0x40, 0x40, // 7
    0xF0, 0x90, 0xF0, 0x90, 0xF0, // 8
    0xF0, 0x90, 0xF0, 0x10, 0xF0, // 9
    0xF0, 0x90, 0xF0, 0x90, 0x90, // A
    0xE0, 0x90, 0xE0, 0x90, 0xE0, // B
    0xF0, 0x80, 0x80, 0x80, 0xF0, // C
    0xE0, 0x90, 0x90, 0x90, 0xE0, // D
    0xF0, 0x80, 0xF0, 0x80, 0xF0, // E
    0xF0, 0x80, 0xF0, 0x80, 0x80, // F
];

pub struct Ram {
    map: [u8; MEMORY_SIZE],
}

impl Ram {
    pub fn new() -> Self {
        Self {
            map: [0; MEMORY_SIZE],
        }
    }

    pub fn read(&self, address: usize) -> u8 {
        self.map[address]
    }

    pub fn write(&mut self, address: usize, value: u8) {
        self.map[address] = value;
    }

    pub fn load_rom(&mut self, rom_buffer: Vec<u8>) {
        for (i, byte) in rom_buffer.iter().enumerate() {
            self.write(i + PROGRAM_START, *byte);
        }
    }

    pub fn load_font_set(&mut self) {
        for i in 0..FONTSET_SIZE {
            self.write(i + FONTSET_START, FONTSET[i]);
        }
    }
}
